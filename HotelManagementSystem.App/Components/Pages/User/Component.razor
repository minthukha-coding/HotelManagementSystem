@page "/test"
@rendermode RenderMode.InteractiveServer
@using MudBlazor
@layout MainLayout
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-6">Available Rooms</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-8" />
        <MudText Typo="Typo.body1" Align="Align.Center">Loading rooms...</MudText>
    }
    else if (!Rooms.Any())
    {
        <MudAlert Severity="Severity.Info" Class="my-8">
            <MudText Typo="Typo.body1">No rooms available at the moment.</MudText>
        </MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var room in Rooms)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="mb-6" Elevation="3">
                        <MudCardMedia Height="200"
                                      Image="@(room.PhotoUrls?.FirstOrDefault()?.PhotoUrl ?? "/images/no-image.jpg")"
                                      Style="cursor: pointer;"
                                      @onclick="() => ShowRoomDetails(room.RoomId)" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@room.Category</MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">@room.Description</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">$@room.Price / night</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       OnClick="() => ShowRoomDetails(room.RoomId)">
                                View Details
                            </MudButton>
                            @* <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       OnClick="() => OpenBookingDialog(room)"
                                       Disabled="@(!room.IsAvailable)">
                                Book Now
                            </MudButton> *@
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       OnClick="() => OpenBookingDialog(room)">
                                Book Now
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }

    <!-- Booking Dialog -->
    <MudDialog @bind-IsVisible="showBookingDialog" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">Book Room: @(selectedRoom?.Category ?? "")</MudText>
        </TitleContent>
        <DialogContent>
            @if (selectedRoom != null)
            {
                <MudForm @ref="form" @bind-IsValid="@formValid">
                    <MudDatePicker Label="Check-in Date"
                                   @bind-Date="bookingModel.CheckInDate"
                                   MinDate="DateTime.Today"
                                   Required="true" />
                    <MudDatePicker Label="Check-out Date"
                                   @bind-Date="bookingModel.CheckOutDate"
                                   MinDate="bookingModel.CheckInDate?.AddDays(1)"
                                   Required="true" />
                    <MudTextField Label="Guests"
                                  @bind-Value="bookingModel.NumberOfGuests"
                                  InputType="InputType.Number"
                                  Required="true" />
                </MudForm>
                <MudText Class="mt-4">Total: $@CalculateTotalPrice()</MudText>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CancelBooking">Cancel</MudButton>
            <MudButton Color="Color.Primary"
                       Disabled="!formValid"
                       OnClick="ConfirmBooking">Confirm Booking</MudButton>
        </DialogActions>
    </MudDialog>

</MudContainer>

@code {
    private List<RoomModel> Rooms = new();
    private RoomModel? selectedRoom;
    private BookingModel bookingModel = new();
    private bool isLoading = true;
    private bool showBookingDialog = false;
    private bool formValid = false;
    private MudForm form;
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadRooms();
        isLoading = false;
    }

    private async Task LoadRooms()
    {
        try
        {
            var result = await _roomService.GetAllRoomForUserRoomListing();
            if (result.IsSuccess)
            {
                Rooms = result.Data ?? new List<RoomModel>();
            }
            else
            {
                Snackbar.Add("Failed to load rooms", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading rooms: {ex.Message}", Severity.Error);
        }
    }

    private void ShowRoomDetails(string roomId)
    {
        Navigation.NavigateTo($"/room-details/{roomId}");
    }

    private void OpenBookingDialog(RoomModel room)
    {
        selectedRoom = room;
        bookingModel = new BookingModel
            {
                RoomId = room.RoomId,
                NumberOfGuests = 1,
                CheckInDate = DateTime.Today,
                CheckOutDate = DateTime.Today.AddDays(1)
            };
        showBookingDialog = true;
    }

    private void CancelBooking()
    {
        showBookingDialog = false;
        selectedRoom = null;
        bookingModel = new();
    }

    private async Task ConfirmBooking()
    {
        if (selectedRoom == null) return;

        try
        {
            var result = await _bookingService.BookRoom(bookingModel.RoomId);
            if (result.IsSuccess)
            {
                Snackbar.Add("Booking confirmed successfully!", Severity.Success);
                showBookingDialog = false;
                await LoadRooms(); // Refresh room availability
            }
            else
            {
                Snackbar.Add("Failed to create booking", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Booking error: {ex.Message}", Severity.Error);
        }
    }

    private double CalculateTotalPrice()
    {
        if (selectedRoom == null || bookingModel.CheckInDate == null || bookingModel.CheckOutDate == null)
            return 0;

        var days = (bookingModel.CheckOutDate.Value - bookingModel.CheckInDate.Value).Days;
        return Convert.ToDouble(selectedRoom.Price * days);
    }

    // Assuming these are your model classes
    public class BookingModel
    {
        public string RoomId { get; set; }
        public DateTime? CheckInDate { get; set; }
        public DateTime? CheckOutDate { get; set; }
        public int NumberOfGuests { get; set; }
    }
}