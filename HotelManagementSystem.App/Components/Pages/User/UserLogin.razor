@page "/"
@using HotelManagementSystem.Domain.Features.User
@using HotelManagementSystem.Shared
@rendermode RenderMode.InteractiveServer
@layout EmptyLayout
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject Domain.Features.User.UserServices _userService

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard>
        <MudCardContent>
            <MudForm Model="loginModel">
                <MudText Typo="Typo.h5" Class="mb-4 text-center">Login</MudText>

                <MudGrid>
                    <MudItem xs="12" Class="mb-4">
                        <MudTextField Label="Email" @bind-Value="loginModel.Email" Required="true" RequiredError="Email is required" Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" Class="mb-4">
                        <MudTextField Label="Password" @bind-Value="loginModel.Password" Required="true" RequiredError="Password is required" Type="password" Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" Class="text-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Login" FullWidth="true">
                            Login
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>


@code {

    private LoginModel loginModel = new();

    private async Task<Result<UserModel>?> Login()
    {
        var model = new Result<UserModel>();

        model = await _userService.Login(loginModel.Email, loginModel.Password);

        if (model!.IsSuccess)
        {
            await JS.InvokeVoidAsync("notiflixNotify.success", "Login successful!");
            Navigation.NavigateTo("/home");

            model = new Result<UserModel>
                {
                    IsSuccess = true,
                    Data = new UserModel
                    {
                        UserId = model.Data!.UserId,
                        Username = model.Data.Username,
                        Email = model.Data.Email,
                        PasswordHash = model.Data.PasswordHash,
                        Role = model.Data.Role,
                        CreatedAt = model.Data.CreatedAt
                    }
                };
        }
        else
        {
            await JS.InvokeVoidAsync("notiflixNotify.error", "Error! Something went wrong.");
            Navigation.NavigateTo("/");
        }

        return model;
    }

    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}