@page "/rooms/add"
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudContainer>
    <MudText Typo="Typo.h4" GutterBottom="true">Add Room</MudText>

    <MudGrid>
        <!-- Room Number -->
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="roomModel.RoomNumber" Label="Room Number" FullWidth="true" />
        </MudItem>

@*         <!-- Status -->
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="roomModel.Status" Label="Status" FullWidth="true" />
        </MudItem> *@

        <!-- Price -->
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="roomModel.Price" Label="Price" FullWidth="true" />
        </MudItem>

        <!-- Description -->
        <MudItem xs="12">
            <MudTextField @bind-Value="roomModel.Description" Label="Description" Lines="3" FullWidth="true" />
        </MudItem>

        <!-- File Upload -->
        <MudItem xs="12">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudItem>

        <!-- Buttons -->
        <MudItem xs="12" class="d-flex justify-end">
            <MudButton MudVariant="MudVariant.Text" Color="Color.Secondary" OnClick="Cancel" class="mr-2">Cancel</MudButton>
            <MudButton MudVariant="MudVariant.Filled" Color="Color.Primary" OnClick="SaveRoom">Add Room</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private RoomModel roomModel = new RoomModel();
    private IReadOnlyList<IBrowserFile>? uploadedFiles;

    // private void OnFileUpload(InputFileChangeEventArgs e)
    // {
    //     uploadedFiles = e.GetMultipleFiles();
    // }

    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        //TODO upload the files to the server
    }

    private async Task SaveRoom()
    {
        try
        {
            await JS.InvokeVoidAsync("manageLoading", "show");

            // Save uploaded photos and add their paths to the roomModel
            if (_files != null)
            {
                roomModel.PhotoUrls = new List<RoomPhotoModel>();
                foreach (var file in _files)
                {
                    var photoUrl = await _roomService.UploadFileAsync(file);
                    roomModel.PhotoUrls.Add(new RoomPhotoModel { PhotoUrl = photoUrl });
                }
            }
            
            // Save the room data
            var result = await _roomService.AddRoomAsync(roomModel);
            if (result.IsSuccess)
            {
                await JS.InvokeVoidAsync("manageLoading", "remove");

                _goto.NavigateTo("/rooms");
            }
            else
            {
                Snackbar.Add($"Error adding room: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/rooms");
    }
}