@page "/rooms/details/{roomId}"

@inject NavigationManager Navigation

<MudContainer>
    <MudText Typo="Typo.h4" GutterBottom="true">Room Details</MudText>

    @if (room == null)
    {
        <MudText Typo="Typo.body1">Loading room details...</MudText>
    }
    else
    {
@*         <MudGrid>
            <MudCardContent Class="flex-grow-1">
                <!-- Room Category -->
                <MudText Typo="Typo.body2" Class="mb-1">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-1" />
                    Category: @room.Category
                </MudText>

                <!-- Room Price -->
                <MudText Typo="Typo.body2" Class="mb-1">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-1" />
                    Price: $@room.Price
                </MudText>

                <!-- Room Description -->
                <MudText Typo="Typo.body2" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-1" />
                    @room.Description
                </MudText>

                <!-- Room Status Chip -->
                <MudChip T="string" Color="@GetRoomStatus(room.Status)" Class="mb-2">
                    @room.Status
                </MudChip>

            </MudCardContent>

            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h6" Class="mb-2">Room Photos</MudText>
                @if (room.PhotoUrls != null && room.PhotoUrls.Any())
                {
                    <MudGrid Spacing="2">
                        @foreach (var photo in room.PhotoUrls)
                        {
                            <MudItem xs="6" sm="4" md="3">
                                <MudImage Src="@photo.PhotoUrl" Class="room-photo" Style="max-width: 100%; height: auto;" />
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <MudText Typo="Typo.body2">No photos available for this room.</MudText>
                }
            </MudItem>
        </MudGrid>
 *@

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent Class="flex-grow-1">
                        <!-- Room Category -->
                        <MudText Typo="Typo.body2" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-1" />
                            <strong>Category:</strong> @room.Category
                        </MudText>

                        <!-- Room Price -->
                        <MudText Typo="Typo.body2" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-1" />
                            <strong>Price:</strong> $@room.Price
                        </MudText>

                        <!-- Room Description -->
                        <MudText Typo="Typo.body2" Class="mb-3">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-1" />
                            <strong>Description:</strong> @room.Description
                        </MudText>

                        <!-- Room Status Chip -->
                        <MudChip T="string" Color="@GetRoomStatus(room.Status)" Class="mb-3">
                            @room.Status
                        </MudChip>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">Room Photos</MudText>
                        @if (room.PhotoUrls != null && room.PhotoUrls.Any())
                        {
                            <MudGrid Spacing="2">
                                @foreach (var photo in room.PhotoUrls)
                                {
                                    <MudItem xs="6" sm="4" md="3">
                                        <MudImage Src="@photo.PhotoUrl" Class="room-photo" Style="max-width: 100%; height: auto; border-radius: 8px;" />
                                    </MudItem>
                                }
                            </MudGrid>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No photos available for this room.</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
 
 <div class="button-container mt-4">
            <MudButton MudVariant="MudVariant.Outlined" Color="Color.Primary" OnClick="BackToRooms" Class="mr-2">Back to Rooms</MudButton>
            <MudButton MudVariant="MudVariant.Outlined" Color="Color.Error" OnClick="DeleteRoom">Delete Room</MudButton>
        </div>
    }
</MudContainer>

@code {
    [Parameter]
    public string roomId { get; set; }

    private RoomModel? room;

    protected override async Task OnParametersSetAsync()
    {
        await LoadRoomDetails();
    }

    private async Task LoadRoomDetails()
    {
        var result = await _roomService.GetRoomByIdAsync(roomId);
        if (result.IsSuccess)
        {
            room = result.Data;
        }
        else
        {
            // Handle error (e.g., show a message or redirect)
            Navigation.NavigateTo("/rooms");
        }
    }

    private async void BackToRooms()
    {
        await JS.InvokeVoidAsync("manageLoading", "show");

        Navigation.NavigateTo("/rooms");

        await JS.InvokeVoidAsync("manageLoading", "remove");
    }

    private async Task DeleteRoom()
    {
        await JS.InvokeVoidAsync("manageLoading", "show");

        var result = await _roomService.DeleteRoomAsync(roomId);
        if (result.IsSuccess)
        {
            await JS.InvokeVoidAsync("manageLoading", "remove");

            // Optionally, show a success message
            Navigation.NavigateTo("/rooms");
        }
        else
        {
            // Handle error (e.g., show an error message)
        }
    }

    private MudBlazor.Color GetRoomStatus(string status)
    {
        return status switch
        {
            "Available" => Color.Success,
            "Booked" => Color.Warning,
            "Occupied" => Color.Error,
            _ => Color.Default
        };
    }
}